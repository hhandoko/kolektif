/**
 * File     : build.gradle
 * License  :
 *   Copyright (c) 2020 kolektif Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *           http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'com.adarshr.test-logger'
    id "com.diffplug.gradle.spotless"
    id 'com.github.ben-manes.versions'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'

    id 'java'
}

apply from: "${project.rootDir}/utils.gradle"

def appVersion = rootProject.file('VERSION.txt').text.trim()
def timestampFormatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME

group = 'com.hhandoko'
version = appVersion
sourceCompatibility = JavaVersion.VERSION_11

processResources {
    filesMatching("**/application.properties") {
        // Replace ${APP_VERSION} with hardcoded application version string}
        filter { line ->
            line.contains('${APP_VERSION}') ? line.replace('${APP_VERSION}', appVersion) : line
        }

        // Replace ${BUILD_TIMESTAMP} with hardcoded current timestamp
        filter { line ->
            line.contains('${BUILD_TIMESTAMP}') ? line.replace('${BUILD_TIMESTAMP}', ZonedDateTime.now().format(timestampFormatter)) : line
        }

        // Replace ${COMMIT_HASH} with latest git commit hash
        filter { line ->
            line.contains('${COMMIT_HASH}') ? line.replace('${COMMIT_HASH}', gitShortHash()) : line
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
//    runtimeOnly 'org.postgresql:postgresql'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        preferProjectModules()
    }
}

bootRun {
    // Pass active profile configuration for better development experience
    def profile = 'local'
    environment 'BOOT_ENV', profile
    systemProperty 'spring.profiles.active', profile
}

spotless {
    java {
        googleJavaFormat()
        importOrder 'java', 'javax', '', '\\#', 'com.hhandoko', '\\#com.hhandoko'
    }
}

test {
    useJUnitPlatform()
}

testlogger {
    theme 'mocha'
    slowThreshold 2000 // ms
}
